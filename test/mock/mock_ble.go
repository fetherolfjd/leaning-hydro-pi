// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-ble/ble (interfaces: Device,Addr,Advertisement)

// Package mock_ble is a generated GoMock package.
package mock_ble

import (
	context "context"
	reflect "reflect"

	ble "github.com/go-ble/ble"
	gomock "github.com/golang/mock/gomock"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// AddService mocks base method.
func (m *MockDevice) AddService(arg0 *ble.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddService indicates an expected call of AddService.
func (mr *MockDeviceMockRecorder) AddService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockDevice)(nil).AddService), arg0)
}

// Advertise mocks base method.
func (m *MockDevice) Advertise(arg0 context.Context, arg1 ble.Advertisement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Advertise", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Advertise indicates an expected call of Advertise.
func (mr *MockDeviceMockRecorder) Advertise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advertise", reflect.TypeOf((*MockDevice)(nil).Advertise), arg0, arg1)
}

// AdvertiseIBeacon mocks base method.
func (m *MockDevice) AdvertiseIBeacon(arg0 context.Context, arg1 ble.UUID, arg2, arg3 uint16, arg4 int8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertiseIBeacon", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvertiseIBeacon indicates an expected call of AdvertiseIBeacon.
func (mr *MockDeviceMockRecorder) AdvertiseIBeacon(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertiseIBeacon", reflect.TypeOf((*MockDevice)(nil).AdvertiseIBeacon), arg0, arg1, arg2, arg3, arg4)
}

// AdvertiseIBeaconData mocks base method.
func (m *MockDevice) AdvertiseIBeaconData(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertiseIBeaconData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvertiseIBeaconData indicates an expected call of AdvertiseIBeaconData.
func (mr *MockDeviceMockRecorder) AdvertiseIBeaconData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertiseIBeaconData", reflect.TypeOf((*MockDevice)(nil).AdvertiseIBeaconData), arg0, arg1)
}

// AdvertiseMfgData mocks base method.
func (m *MockDevice) AdvertiseMfgData(arg0 context.Context, arg1 uint16, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertiseMfgData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvertiseMfgData indicates an expected call of AdvertiseMfgData.
func (mr *MockDeviceMockRecorder) AdvertiseMfgData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertiseMfgData", reflect.TypeOf((*MockDevice)(nil).AdvertiseMfgData), arg0, arg1, arg2)
}

// AdvertiseNameAndServices mocks base method.
func (m *MockDevice) AdvertiseNameAndServices(arg0 context.Context, arg1 string, arg2 ...ble.UUID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdvertiseNameAndServices", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvertiseNameAndServices indicates an expected call of AdvertiseNameAndServices.
func (mr *MockDeviceMockRecorder) AdvertiseNameAndServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertiseNameAndServices", reflect.TypeOf((*MockDevice)(nil).AdvertiseNameAndServices), varargs...)
}

// AdvertiseServiceData16 mocks base method.
func (m *MockDevice) AdvertiseServiceData16(arg0 context.Context, arg1 uint16, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertiseServiceData16", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvertiseServiceData16 indicates an expected call of AdvertiseServiceData16.
func (mr *MockDeviceMockRecorder) AdvertiseServiceData16(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertiseServiceData16", reflect.TypeOf((*MockDevice)(nil).AdvertiseServiceData16), arg0, arg1, arg2)
}

// Dial mocks base method.
func (m *MockDevice) Dial(arg0 context.Context, arg1 ble.Addr) (ble.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", arg0, arg1)
	ret0, _ := ret[0].(ble.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockDeviceMockRecorder) Dial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockDevice)(nil).Dial), arg0, arg1)
}

// RemoveAllServices mocks base method.
func (m *MockDevice) RemoveAllServices() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllServices")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllServices indicates an expected call of RemoveAllServices.
func (mr *MockDeviceMockRecorder) RemoveAllServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllServices", reflect.TypeOf((*MockDevice)(nil).RemoveAllServices))
}

// Scan mocks base method.
func (m *MockDevice) Scan(arg0 context.Context, arg1 bool, arg2 ble.AdvHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockDeviceMockRecorder) Scan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDevice)(nil).Scan), arg0, arg1, arg2)
}

// SetServices mocks base method.
func (m *MockDevice) SetServices(arg0 []*ble.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServices indicates an expected call of SetServices.
func (mr *MockDeviceMockRecorder) SetServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServices", reflect.TypeOf((*MockDevice)(nil).SetServices), arg0)
}

// Stop mocks base method.
func (m *MockDevice) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDeviceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDevice)(nil).Stop))
}

// MockAddr is a mock of Addr interface.
type MockAddr struct {
	ctrl     *gomock.Controller
	recorder *MockAddrMockRecorder
}

// MockAddrMockRecorder is the mock recorder for MockAddr.
type MockAddrMockRecorder struct {
	mock *MockAddr
}

// NewMockAddr creates a new mock instance.
func NewMockAddr(ctrl *gomock.Controller) *MockAddr {
	mock := &MockAddr{ctrl: ctrl}
	mock.recorder = &MockAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddr) EXPECT() *MockAddrMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockAddr) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAddrMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAddr)(nil).String))
}

// MockAdvertisement is a mock of Advertisement interface.
type MockAdvertisement struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertisementMockRecorder
}

// MockAdvertisementMockRecorder is the mock recorder for MockAdvertisement.
type MockAdvertisementMockRecorder struct {
	mock *MockAdvertisement
}

// NewMockAdvertisement creates a new mock instance.
func NewMockAdvertisement(ctrl *gomock.Controller) *MockAdvertisement {
	mock := &MockAdvertisement{ctrl: ctrl}
	mock.recorder = &MockAdvertisementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertisement) EXPECT() *MockAdvertisementMockRecorder {
	return m.recorder
}

// Addr mocks base method.
func (m *MockAdvertisement) Addr() ble.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(ble.Addr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockAdvertisementMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockAdvertisement)(nil).Addr))
}

// Connectable mocks base method.
func (m *MockAdvertisement) Connectable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connectable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Connectable indicates an expected call of Connectable.
func (mr *MockAdvertisementMockRecorder) Connectable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connectable", reflect.TypeOf((*MockAdvertisement)(nil).Connectable))
}

// LocalName mocks base method.
func (m *MockAdvertisement) LocalName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalName")
	ret0, _ := ret[0].(string)
	return ret0
}

// LocalName indicates an expected call of LocalName.
func (mr *MockAdvertisementMockRecorder) LocalName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalName", reflect.TypeOf((*MockAdvertisement)(nil).LocalName))
}

// ManufacturerData mocks base method.
func (m *MockAdvertisement) ManufacturerData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManufacturerData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ManufacturerData indicates an expected call of ManufacturerData.
func (mr *MockAdvertisementMockRecorder) ManufacturerData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManufacturerData", reflect.TypeOf((*MockAdvertisement)(nil).ManufacturerData))
}

// OverflowService mocks base method.
func (m *MockAdvertisement) OverflowService() []ble.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverflowService")
	ret0, _ := ret[0].([]ble.UUID)
	return ret0
}

// OverflowService indicates an expected call of OverflowService.
func (mr *MockAdvertisementMockRecorder) OverflowService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverflowService", reflect.TypeOf((*MockAdvertisement)(nil).OverflowService))
}

// RSSI mocks base method.
func (m *MockAdvertisement) RSSI() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSSI")
	ret0, _ := ret[0].(int)
	return ret0
}

// RSSI indicates an expected call of RSSI.
func (mr *MockAdvertisementMockRecorder) RSSI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSSI", reflect.TypeOf((*MockAdvertisement)(nil).RSSI))
}

// ServiceData mocks base method.
func (m *MockAdvertisement) ServiceData() []ble.ServiceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceData")
	ret0, _ := ret[0].([]ble.ServiceData)
	return ret0
}

// ServiceData indicates an expected call of ServiceData.
func (mr *MockAdvertisementMockRecorder) ServiceData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceData", reflect.TypeOf((*MockAdvertisement)(nil).ServiceData))
}

// Services mocks base method.
func (m *MockAdvertisement) Services() []ble.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services")
	ret0, _ := ret[0].([]ble.UUID)
	return ret0
}

// Services indicates an expected call of Services.
func (mr *MockAdvertisementMockRecorder) Services() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockAdvertisement)(nil).Services))
}

// SolicitedService mocks base method.
func (m *MockAdvertisement) SolicitedService() []ble.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolicitedService")
	ret0, _ := ret[0].([]ble.UUID)
	return ret0
}

// SolicitedService indicates an expected call of SolicitedService.
func (mr *MockAdvertisementMockRecorder) SolicitedService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolicitedService", reflect.TypeOf((*MockAdvertisement)(nil).SolicitedService))
}

// TxPowerLevel mocks base method.
func (m *MockAdvertisement) TxPowerLevel() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPowerLevel")
	ret0, _ := ret[0].(int)
	return ret0
}

// TxPowerLevel indicates an expected call of TxPowerLevel.
func (mr *MockAdvertisementMockRecorder) TxPowerLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPowerLevel", reflect.TypeOf((*MockAdvertisement)(nil).TxPowerLevel))
}
