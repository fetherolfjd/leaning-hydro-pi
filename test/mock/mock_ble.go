// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-ble/ble (interfaces: Advertisement,Addr)

// Package mock_ble is a generated GoMock package.
package mock_ble

import (
	reflect "reflect"

	ble "github.com/go-ble/ble"
	gomock "github.com/golang/mock/gomock"
)

// MockAdvertisement is a mock of Advertisement interface.
type MockAdvertisement struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertisementMockRecorder
}

// MockAdvertisementMockRecorder is the mock recorder for MockAdvertisement.
type MockAdvertisementMockRecorder struct {
	mock *MockAdvertisement
}

// NewMockAdvertisement creates a new mock instance.
func NewMockAdvertisement(ctrl *gomock.Controller) *MockAdvertisement {
	mock := &MockAdvertisement{ctrl: ctrl}
	mock.recorder = &MockAdvertisementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertisement) EXPECT() *MockAdvertisementMockRecorder {
	return m.recorder
}

// Addr mocks base method.
func (m *MockAdvertisement) Addr() ble.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(ble.Addr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockAdvertisementMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockAdvertisement)(nil).Addr))
}

// Connectable mocks base method.
func (m *MockAdvertisement) Connectable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connectable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Connectable indicates an expected call of Connectable.
func (mr *MockAdvertisementMockRecorder) Connectable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connectable", reflect.TypeOf((*MockAdvertisement)(nil).Connectable))
}

// LocalName mocks base method.
func (m *MockAdvertisement) LocalName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalName")
	ret0, _ := ret[0].(string)
	return ret0
}

// LocalName indicates an expected call of LocalName.
func (mr *MockAdvertisementMockRecorder) LocalName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalName", reflect.TypeOf((*MockAdvertisement)(nil).LocalName))
}

// ManufacturerData mocks base method.
func (m *MockAdvertisement) ManufacturerData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManufacturerData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ManufacturerData indicates an expected call of ManufacturerData.
func (mr *MockAdvertisementMockRecorder) ManufacturerData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManufacturerData", reflect.TypeOf((*MockAdvertisement)(nil).ManufacturerData))
}

// OverflowService mocks base method.
func (m *MockAdvertisement) OverflowService() []ble.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverflowService")
	ret0, _ := ret[0].([]ble.UUID)
	return ret0
}

// OverflowService indicates an expected call of OverflowService.
func (mr *MockAdvertisementMockRecorder) OverflowService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverflowService", reflect.TypeOf((*MockAdvertisement)(nil).OverflowService))
}

// RSSI mocks base method.
func (m *MockAdvertisement) RSSI() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSSI")
	ret0, _ := ret[0].(int)
	return ret0
}

// RSSI indicates an expected call of RSSI.
func (mr *MockAdvertisementMockRecorder) RSSI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSSI", reflect.TypeOf((*MockAdvertisement)(nil).RSSI))
}

// ServiceData mocks base method.
func (m *MockAdvertisement) ServiceData() []ble.ServiceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceData")
	ret0, _ := ret[0].([]ble.ServiceData)
	return ret0
}

// ServiceData indicates an expected call of ServiceData.
func (mr *MockAdvertisementMockRecorder) ServiceData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceData", reflect.TypeOf((*MockAdvertisement)(nil).ServiceData))
}

// Services mocks base method.
func (m *MockAdvertisement) Services() []ble.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services")
	ret0, _ := ret[0].([]ble.UUID)
	return ret0
}

// Services indicates an expected call of Services.
func (mr *MockAdvertisementMockRecorder) Services() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockAdvertisement)(nil).Services))
}

// SolicitedService mocks base method.
func (m *MockAdvertisement) SolicitedService() []ble.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolicitedService")
	ret0, _ := ret[0].([]ble.UUID)
	return ret0
}

// SolicitedService indicates an expected call of SolicitedService.
func (mr *MockAdvertisementMockRecorder) SolicitedService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolicitedService", reflect.TypeOf((*MockAdvertisement)(nil).SolicitedService))
}

// TxPowerLevel mocks base method.
func (m *MockAdvertisement) TxPowerLevel() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPowerLevel")
	ret0, _ := ret[0].(int)
	return ret0
}

// TxPowerLevel indicates an expected call of TxPowerLevel.
func (mr *MockAdvertisementMockRecorder) TxPowerLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPowerLevel", reflect.TypeOf((*MockAdvertisement)(nil).TxPowerLevel))
}

// MockAddr is a mock of Addr interface.
type MockAddr struct {
	ctrl     *gomock.Controller
	recorder *MockAddrMockRecorder
}

// MockAddrMockRecorder is the mock recorder for MockAddr.
type MockAddrMockRecorder struct {
	mock *MockAddr
}

// NewMockAddr creates a new mock instance.
func NewMockAddr(ctrl *gomock.Controller) *MockAddr {
	mock := &MockAddr{ctrl: ctrl}
	mock.recorder = &MockAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddr) EXPECT() *MockAddrMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockAddr) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAddrMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAddr)(nil).String))
}
